#include <iostream>

struct TreeNode {
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Helper function to find the minimum value node in a binary tree
TreeNode* findMin(TreeNode* node) {
    while (node->left != nullptr) {
        node = node->left;
    }
    return node;
}

// Helper function to delete a node from the binary tree
TreeNode* deleteNode(TreeNode* root, int key) {
    if (root == nullptr) {
        return root;
    }

    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        // Node with one or no child
        if (root->left == nullptr) {
            TreeNode* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            TreeNode* temp = root->left;
            delete root;
            return temp;
        }

        // Node with two children
        TreeNode* temp = findMin(root->right); // Find the minimum value in the right subtree
        root->data = temp->data; // Replace the node data with the minimum value
        root->right = deleteNode(root->right, temp->data); // Delete the duplicate node in the right subtree
    }
    return root;
}

// Function to print the binary tree in-order
void inOrderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }

    inOrderTraversal(root->left);
    std::cout << root->data << " ";
    inOrderTraversal(root->right);
}

int main() {
    // Sample binary tree
    TreeNode* root = new TreeNode(10);
    root->left = new TreeNode(5);
    root->right = new TreeNode(20);
    root->left->left = new TreeNode(3);
    root->left->right = new TreeNode(8);
    root->right->left = new TreeNode(15);
    root->right->right = new TreeNode(25);

    std::cout << "Original binary tree (in-order): ";
    inOrderTraversal(root);
    std::cout << std::endl;

    int key_to_delete = 10;
    root = deleteNode(root, key_to_delete);

    std::cout << "Binary tree after deleting " << key_to_delete << " (in-order): ";
    inOrderTraversal(root);
    std::cout << std::endl;

    // Don't forget to free the memory by deallocating the tree nodes
    // Code for deallocation is not shown here for simplicity.

    return 0;
}
